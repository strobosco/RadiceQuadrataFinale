{"version":3,"sources":["pages/components/Descrizione.js","pages/components/Calcolo.js","pages/components/Metodo.js","pages/components/Titolo.js","pages/components/NumericalAnalysis.js","pages/HomePage.js","pages/components/TitoloParagone.js","pages/components/ParagoneInput.js","pages/components/TableHead.js","pages/components/Table.js","grafici/MiniFigure.png","grafici/BigFigure.png","pages/components/Grafici.js","pages/Paragone.js","App.js","reportWebVitals.js","index.js","functions/funzioni.js"],"names":["Descrizione","nameOfClass","src","chooseDesc","Calcolo","setRisultato","useState","radicando","setRadicando","ripetizioni","setRipetizioni","onSubmit","e","a","preventDefault","ris","radice","Babilonese","Errore","Tangenti","Inverso","type","id","placeholder","value","onChange","target","className","Metodo","showDesc","onToggle","risultato","method","onClick","isShown","Titolo","NumericalAnalysis","style","textAlign","HomePage","showDescription","setShowDescription","risultatoBabilonese","setRisultatoBabilonese","risultatoErrore","setRisultatoErrore","risultatoTangenti","setRisultatoTangenti","risultatoInverso","setRisultatoInverso","toggleDesc","map","href","to","TitoloParagone","ParagoneInput","showHead","setShowHead","confronti","setConfronti","i","risBab","risErr","risTan","risInv","confronto","babilonese","errore","tangenti","inverso","console","log","TableHead","Table","Grafici","graficoMini","graficoBig","Paragone","App","basename","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports","num","iterazioni","Q","Qprec","n","esci","Math","abs","volte","x"],"mappings":"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","file":"static/js/main.ea898e10.chunk.js","sourcesContent":["const Descrizione = ({ nameOfClass }) => {\n\n    const chooseDesc = (nameOfClass) => {\n\n        const descBabilonese = \"Il metodo babilonese è il metodo più antico per approssimare la radice. \\\n        E' un algoritmo basato sulle approssimazioni successive della media aritmetica di due numeri, \\\n        il valore valore sarà sempre maggiore del valore della radice stessa.\";\n        const descErrore = \"Il metodo con controllo dell'errore approssima il valore della radice \\\n        controllando l'aumento di precisione tra due iterazioni dell'algoritmo babilonese.\";\n        const descTangenti = \"Il metodo delle tangenti sfrutta le proprietà delle tangenti per \\\n        realizzare approssimazioni successive. Il valore che viene calcolato corrisponde all'intersezione tra \\\n        l'asse delle x e la tangente alla retta di una funzione in un punto. Il metodo ha il maggior grado di \\\n        efficienza quando il valore iniziale è vicino al valore della radice\";\n        const descInverso = \"Il metodo dell'inverso calcola il reciproco del valore della radice. E' un \\\n        algoritmo molto preciso, con una velocità di computazione alta.\";\n\n        switch(nameOfClass){\n            case \"babilonese\":\n                return (<>\n                <p>{descBabilonese}</p>\n                <img src=\"https://miro.medium.com/max/237/0*eZi6AX0tWAmI-ICy.png\" />\n                </>) ;\n                break;\n            case \"errore\":\n                return (<>\n                <p>{descErrore}</p>\n                </>);\n                break;\n            case \"tangenti\":\n                return (<>\n                <p>{descTangenti}</p>\n                <img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/e/e0/NewtonIteration_Ani.gif/450px-NewtonIteration_Ani.gif\" />\n                </>);\n                break;\n            case \"inverso\":\n                return (<>\n                    <p>{descInverso}</p>\n                </>)\n            default:\n                return \"Il metodo selezionato non esiste\"\n        }\n    }\n\n    return (\n        <>{chooseDesc(nameOfClass)}</>\n    )\n}\n\nexport default Descrizione\n","import { useState } from \"react\"\nimport radice from \"../../functions/funzioni\";\n\nconst Calcolo = ({ nameOfClass, setRisultato }) => {\n\n    const [radicando, setRadicando] = useState(\"\")\n    const [ripetizioni, setRipetizioni] = useState(\"\")\n\n    const onSubmit = async (e) => {\n        e.preventDefault()\n\n        switch(nameOfClass) {\n            case \"babilonese\":\n                var ris = radice.Babilonese(radicando, ripetizioni)\n                break\n            case \"errore\":\n                var ris = radice.Errore(radicando, ripetizioni)\n                break\n            case \"tangenti\":\n                var ris = radice.Tangenti(radicando, ripetizioni)\n                break\n            case \"inverso\":\n                var ris = 1 / radice.Inverso(radicando, ripetizioni)\n                break\n        }\n\n        setRisultato(ris)\n    }\n\n    return (\n        <>\n            <form onSubmit={onSubmit}>\n                <input type=\"number\" id={\"radicando\" + nameOfClass} placeholder=\"Radicando\" value={radicando} onChange={(e) => setRadicando(e.target.value)}></input> <br></br> <br></br>\n                <input type=\"number\" id={\"ripetizioni\" + nameOfClass} placeholder=\"Ripetizioni massime\" value={ripetizioni} onChange={(e) => setRipetizioni(e.target.value)}></input> <br></br> <br></br>\n                <input type=\"submit\" value=\"Calcola!\" className=\"calcola\"></input>\n            </form>\n        </>\n    )\n}\n\nexport default Calcolo\n","import Descrizione from \"./Descrizione\"\nimport Calcolo from \"./Calcolo\"\n\nconst Metodo = ({ nameOfClass, showDesc, onToggle, setRisultato, risultato }) => {\n\n    switch(nameOfClass) {\n        case \"babilonese\":\n            var method = \"Babilonese\"\n            break\n        case \"errore\":\n            var method = \"Errore\"\n            break\n        case \"tangenti\":\n            var method = \"Tangenti\"\n            break\n        case \"inverso\":\n            var method = \"Inverso\"\n            break\n    }\n\n    return (\n        <div className={nameOfClass}>\n            <button type=\"button\" className=\"collapsible\" onClick={() => onToggle(showDesc.id)}>Metodo {method}</button> <br/><br/>     \n            {showDesc.isShown && <Descrizione nameOfClass={nameOfClass} />} <br/>\n            <Calcolo nameOfClass={nameOfClass} setRisultato={setRisultato} />\n            <span id={\"risultato\" + nameOfClass}>{risultato}</span> \n        </div>\n    )\n}\n\nexport default Metodo\n","const Titolo = () => {\n    return (\n        <div className=\"titolo\">\n            <h1>Calcolo approssimato della radice quadrata</h1>\n        </div>\n    )\n}\n\nexport default Titolo\n","const NumericalAnalysis = ({ showDesc, onToggle }) => {\r\n    return (\r\n        <div className=\"intro\">\r\n            <button type=\"button\" className=\"collapsible\" onClick={() => onToggle(showDesc.id)}>Numerical Analysis</button> <br/><br/>\r\n            {showDesc.isShown ? (<div className=\"intro-text\">\r\n            <p>Numerical Analysis is the study of algorithms\r\n            to solve problems of continuous mathematics. These algorithms\r\n            allow for calculations that are quick, effective, and efficient.\r\n            They have increased the speed with which calculations and approximations are done.</p>\r\n            <p> There are several reasons why numerical analysis is necessary:\r\n                <ul>\r\n                    <li>The types of problems studied by numerical analysisare continuous\r\n                    and have infinite solutions, thus approximations are necessary.</li>\r\n                    <li>Algorithms that calculate exact solutions are inefficient</li>\r\n                </ul>\r\n            </p>\r\n            </div>) : (<h1 className=\"intro-question\" style={{textAlign: \"center\"}}>What is Numerical Analysis?</h1>) } <br/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NumericalAnalysis\r\n","import Metodo from './components/Metodo';\nimport Titolo from \"./components/Titolo\";\nimport NumericalAnalysis from \"./components/NumericalAnalysis\"\nimport { Link } from \"react-router-dom\";\nimport { useState } from \"react\";\n\nconst HomePage = () => {\n\n  const [showDescription, setShowDescription] = useState([\n    {\n      id: 0,\n      isShown: false,\n    }, {\n      id: 1,\n      isShown: false,\n    }, {\n      id: 2,\n      isShown: false,\n    }, {\n      id: 3,\n      isShown: false,\n    }, {\n      id: 4,\n      isShown: false,\n    }\n  ]);\n\n  const [risultatoBabilonese, setRisultatoBabilonese] = useState(\"\");\n  const [risultatoErrore, setRisultatoErrore] = useState(\"\");\n  const [risultatoTangenti, setRisultatoTangenti] = useState(\"\");\n  const [risultatoInverso, setRisultatoInverso] = useState(\"\");\n\n  const toggleDesc = (id) => {\n    setShowDescription(showDescription.map((showDescription) => \n      showDescription.id === id ? {...showDescription, isShown: !showDescription.isShown} : showDescription\n    ))\n  };\n\n  return (\n    <>\n    <Titolo />\n    <NumericalAnalysis showDesc={showDescription[4]} onToggle={toggleDesc} />\n    <Metodo nameOfClass={\"babilonese\"} showDesc={showDescription[0]} onToggle={toggleDesc} risultato={risultatoBabilonese} setRisultato={setRisultatoBabilonese}  />\n    <Metodo nameOfClass={\"errore\"} showDesc={showDescription[1]} onToggle={toggleDesc} risultato={risultatoErrore} setRisultato={setRisultatoErrore} />\n    <Metodo nameOfClass={\"tangenti\"} showDesc={showDescription[2]} onToggle={toggleDesc} risultato={risultatoTangenti} setRisultato={setRisultatoTangenti} />\n    <Metodo nameOfClass={\"inverso\"} showDesc={showDescription[3]} onToggle={toggleDesc} risultato={risultatoInverso} setRisultato={setRisultatoInverso} />\n    <a className=\"calcola\" href=\"https://github.com/strobosco/RadiceQuadrataFinale\">Link to GitHub Repo</a>\n    <Link className=\"calcola\" to=\"/paragone\">Paragone</Link>\n    </>\n  );\n}\n\nexport default HomePage;\n","const TitoloParagone = () => {\n    return (\n        <div className=\"titolo\">\n            <h1>Paragoniamo i vari metodi</h1>\n        </div>\n    )\n}\n\nexport default TitoloParagone\n","import { useState } from \"react\";\nimport radice from \"../../functions/funzioni\";\n\nconst ParagoneInput = ({ risultato, setRisultato, showHead, setShowHead }) => {\n\n    const [radicando, setRadicando] = useState(\"\")\n    const [ripetizioni, setRipetizioni] = useState(\"\")\n    const [confronti, setConfronti] = useState(\"\")\n\n    const onSubmit = async (e) => {\n        e.preventDefault()\n\n        const risultato = []\n\n        for(var i = 0; i < confronti; i++) {\n            const risBab = radice.Babilonese(radicando, ripetizioni)\n            const risErr = radice.Errore(radicando, ripetizioni)\n            const risTan = radice.Tangenti(radicando, ripetizioni)\n            const risInv = 1 / radice.Inverso(radicando, ripetizioni)\n\n            risultato[i] = {\n                confronto: i + 1,\n                babilonese: risBab,\n                errore:risErr,\n                tangenti: risTan,\n                inverso: risInv,\n            }\n        }\n\n\n        setRisultato(risultato)\n        console.log(risultato)\n\n        if(showHead == false) {\n            setShowHead(true)\n        }\n    }\n\n    return (\n        <div className=\"tabella-output\">\n            <form onSubmit={onSubmit}>\n                <input type=\"number\" placeholder=\"Radicando\" value={radicando} onChange={(e) => setRadicando(e.target.value)}></input> <br></br> <br></br>\n                <input type=\"number\" placeholder=\"Ripetizioni massime\" value={ripetizioni} onChange={(e) => setRipetizioni(e.target.value)}></input> <br></br> <br></br>\n                <input type=\"number\" placeholder=\"Numero confronti\" value={confronti} onChange={(e) => setConfronti(e.target.value)}></input> <br></br> <br></br>\n                <input type=\"submit\" value=\"Paragona!\" className=\"calcola\"></input>\n            </form> \n        </div>\n    )\n\n}\n\nexport default ParagoneInput;","const TableHead = () => {\n    return (\n        <thead>\n            <tr>\n                <td>Confronto</td>\n                <td>Babilonese</td>\n                <td>Errore</td>\n                <td>Tangenti</td>\n                <td>Inverso</td>\n            </tr>\n        </thead>\n    )\n}\n\nexport default TableHead\n","import TableHead from \"./TableHead\";\n\nconst Table = ({ risultato, showHead }) => {\n\n    const renderTbody = () => {\n        \n        return(\n            risultato.map( ris => {\n                return(\n                    <tr key={ris.confronto} >\n                        <td>{ris.confronto}</td>\n                        <td>{ris.babilonese}</td>\n                        <td>{ris.errore}</td>\n                        <td>{ris.tangenti}</td>\n                        <td>{ris.inverso}</td>\n                    </tr>  \n            )})\n        )\n    }\n\n    return (\n        <table className=\"tabella-output\">\n            {showHead ? (<TableHead />) : null}\n            <tbody>\n                {renderTbody()}\n            </tbody> \n        </table>\n    )\n}\n\nexport default Table\n","export default __webpack_public_path__ + \"static/media/MiniFigure.3f387bbb.png\";","export default __webpack_public_path__ + \"static/media/BigFigure.bed13ce7.png\";","import graficoMini from \"../../grafici/MiniFigure.png\";\nimport graficoBig from \"../../grafici/BigFigure.png\";\n\nconst Grafici = () => {\n    return (\n        <div className=\"grafici\">\n            <h1>Grafici</h1>\n            <img src={graficoMini}></img> \n            <p className=\"didascalia\">Il grafico mostra i valori ottenuti per radicando molto piccoli. Come possiamo vedere i metodi Babilonese\n            ed Errore non hanno svolto sufficienti iterazioni per ottenere un valore paragonabile</p>\n            <br /> <br />\n            <img src={graficoBig}></img> \n            <p className=\"didascalia\">Il grafico mostra i valori ottenuti per radicando molto grandi. Come possiamo vedere i metodi iniziano a\n            ottenere valori diversi per radicando uguali</p>\n            <br /> <br />\n            <p className=\"didascalia\">Ogni calcolo è stato svolto in 10 iterazioni</p>\n        </div>\n    )\n}\n\nexport default Grafici\n","import Titolo from \"./components/TitoloParagone\";\nimport ParagoneInput from \"./components/ParagoneInput\";\nimport Table from './components/Table';\nimport Grafici from \"./components/Grafici\";\nimport { Link } from \"react-router-dom\";\nimport { useState } from \"react\";\n\nconst Paragone = () => {\n\n    const [risultato, setRisultato] = useState([])\n    const [showHead, setShowHead] = useState(false)\n\n    return (\n        <>\n        <Titolo />\n        <ParagoneInput risultato={risultato} setRisultato={setRisultato} showHead={showHead} setShowHead={setShowHead} />\n        <Table risultato={risultato} showHead={showHead} />\n        <Grafici />\n        <Link className=\"calcola\" to=\"/\">Torna indietro</Link>\n        </>\n    );\n}\n\n\nexport default Paragone;\n","import HomePage from \"./pages/HomePage\";\nimport Paragone from \"./pages/Paragone\";\nimport {\n  HashRouter as Router,\n  Route,\n  Switch,\n  Link,\n  Redirect\n} from \"react-router-dom\";\n\nconst App = () => {\n\n  return(\n    <Router basename=\"/\">\n      <Route exact path=\"/\" component={HomePage} />\n      <Route exact path=\"/paragone\" component={Paragone} />\n    </Router>\n  )\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","module.exports.Babilonese = function Babilonese(num, iterazioni){\n\n    var Q, Qprec, n;\n    n = 0;\n    Qprec = num / 2;\n    for(n = 0; n < iterazioni; n++){\n        Q = (Qprec + num / Qprec) / 2;\n        Qprec = Q;\n    }\n\n    return Q;\n\n}\n\nmodule.exports.Errore = function Errore(num, iterazioni){\n\n    const EPS = 0.00001;\n\n    var Q, Qprec, errore;\n    var n, esci = 0;\n    Qprec = num / 2;\n    for(n = 0; n < iterazioni && !esci; n++){\n        Q = (Qprec + num / Qprec) / 2;\n        errore = Math.abs((Q - Qprec) / Q);\n        if(errore < EPS) {\n            esci = 1;\n        } else {\n            Qprec = Q;\n        }\n    }\n\n    return Q;\n}\n\n// da definire tangenti e inverso\n\nmodule.exports.Tangenti = function Tangenti(num, iterazioni){\n\n    var volte = 0;\n    var x = 1.0;\n    for(volte = 0; volte <= iterazioni; volte++){\n        x = (x / 2) + (num / (2 * x));\n    }\n\n    return x;\n\n}\n\nmodule.exports.Inverso = function Inverso(num, iterazioni){\n\n    var volte = 0;\n    var x = 0.002;\n    for(volte = 0; volte <= iterazioni; volte++){\n        x = 0.5 * x * (3 - num * x * x);\n    }\n    \n    return x;\n\n}"],"sourceRoot":""}